//-
//- caos-dashboard - CAOS dashboard
//-
//- Copyright Â© 2017 INFN - Istituto Nazionale di Fisica Nucleare (Italy)
//-
//- Licensed under the Apache License, Version 2.0 (the "License");
//- you may not use this file except in compliance with the License.
//- You may obtain a copy of the License at
//-
//-     http://www.apache.org/licenses/LICENSE-2.0
//-
//- Unless required by applicable law or agreed to in writing, software
//- distributed under the License is distributed on an "AS IS" BASIS,
//- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//- See the License for the specific language governing permissions and
//- limitations under the License.
//-
//-
//- Author: Fabrizio Chiarello <fabrizio.chiarello@pd.infn.it>
//-

h3 Global Overview

.row
  .col
    .card
      .card-block
        h4.card-title Instances
        p.card-text {{ total.running_vms }}

  .col
    .card
      .card-block
        h4.card-title Allocated VCPUs
        .progress
          .progress-bar([style.width.%]="total.vcpus_used_percent", [ngClass]="usage_class(total.vcpus_used_percent)")
            | {{ total.vcpus_used_percent | number:'1.2-2' }}%
        | {{ total.vcpus_used }} of {{ total.vcpus_total }}

  .col
    .card
      .card-block
        h4.card-title Allocated VRAM [GB]
        .progress
          .progress-bar([style.width.%]="total.memory_used_percent", [ngClass]="usage_class(total.memory_used_percent)")
            | {{ total.memory_used_percent | number:'1.2-2' }}%
        | {{ total.memory_used / 1e9 | number:'1.2-2' }} of {{ total.memory_total / 1e9 | number:'1.2-2' }}

.row
  .col
    .card
      .card-block
        h3.card-title Average Load
        .row
          .col-2
            | 5 minutes
          .col
            .progress
              .progress-bar([style.width.%]="total.load_5m", [ngClass]="usage_class(total.load_5m)")
                | {{ total.load_5m | number:'1.2-2' }}%
        .row
          .col-2
            | 10 minutes
          .col
            .progress
              .progress-bar([style.width.%]="total.load_10m", [ngClass]="usage_class(total.load_10m)")
                | {{ total.load_10m | number:'1.2-2' }}%
        .row
          .col-2
            | 15 minutes
          .col
            .progress
              .progress-bar([style.width.%]="total.load_15m", [ngClass]="usage_class(total.load_15m)")
                | {{ total.load_15m | number:'1.2-2' }}%

  .col
    .card
      .card-block
        h4.card-title Allocated VCPUs (w.r.t bare)
        .progress
          .progress-bar([style.width.%]="total.cpus_used_percent", [ngClass]="usage_class(total.cpus_used_percent)")
            | {{ total.cpus_used_percent | number:'1.2-2' }}%
        | {{ total.vcpus_used }} of {{ total.cpus_total }}

  .col
    .card
      .card-block
        h4.card-title Allocated VRAM [GB] (w.r.t bare)
        .progress
          .progress-bar([style.width.%]="total.ram_used_percent", [ngClass]="usage_class(total.ram_used_percent)")
            | {{ total.ram_used_percent | number:'1.2-2' }}%
        | {{ total.memory_used / 1e9 | number:'1.2-2' }} of {{ total.ram_total / 1e9 | number:'1.2-2' }}

graph([config]='graph_config', [show_daterange_selector]="true", [show_set_selector]="true")

hr
h3 Hypervisors

p-dataTable(#dt, [value]="hypervisors", tableStyleClass="table", expandableRows="true")
  p-column(expander="true", [style]="{'width':'32px'}")

  p-column(header='Name', field='hostname', [sortable]="true")
  p-column(header='Last Updated', field='last_updated', [sortable]="true")
  p-column(header='State / Status')
    ng-template(let-col, let-rd="rowData", pTemplate="body")
      | {{ rd.metadata.state }} / {{ rd.metadata.status }}

  p-column(header="Running VMs", field='running_vms', [sortable]="true")
  p-column(header="Workload", field='workload', [sortable]="true")
  p-column(header="Allocated VCPUs")
    ng-template(let-col, let-rd="rowData", pTemplate="body")
      .progress
        .progress-bar([style.width.%]="rd.vcpus_used_percent", [ngClass]="usage_class(rd.vcpus_used_percent)")
          | {{ rd.vcpus_used_percent | number:'1.2-2' }}%
      | {{ rd.vcpus_used }} of {{ rd.vcpus_total }}

  p-column(header="Allocated VRAMs")
    ng-template(let-col, let-rd="rowData", pTemplate="body")
      .progress
        .progress-bar([style.width.%]="rd.memory_used_percent", [ngClass]="usage_class(rd.memory_used_percent)")
          | {{ rd.memory_used_percent | number:'1.2-2' }}%
      | {{ rd.memory_used / 1e9 | number:'1.2-2' }}GB of {{ rd.memory_total / 1e9 | number:'1.2-2' }}GB
  p-column(header="Allocated VCPUs (w.r.t bare)")
    ng-template(let-col, let-rd="rowData", pTemplate="body")
      .progress
        .progress-bar([style.width.%]="rd.cpus_used_percent", [ngClass]="usage_class(rd.cpus_used_percent)")
          | {{ rd.cpus_used_percent | number:'1.2-2' }}%
      | {{ rd.vcpus_used }} of {{ rd.cpus_total }}

  p-column(header="Allocated VRAMs (w.r.t bare)")
    ng-template(let-col, let-rd="rowData", pTemplate="body")
      .progress
        .progress-bar([style.width.%]="rd.ram_used_percent", [ngClass]="usage_class(rd.ram_used_percent)")
          | {{ rd.ram_used_percent | number:'1.2-2' }}%
      | {{ rd.memory_used / 1e9 | number:'1.2-2' }}GB of {{ rd.ram_total / 1e9 | number:'1.2-2' }}GB

  p-column(header="Load")
    ng-template(let-col, let-rd="rowData", pTemplate="body")
      .row
        .col-2
          small 5m
        .col
          .progress
            .progress-bar([style.width.%]="rd.load_5m", [ngClass]="usage_class(rd.load_5m)")
              | {{ rd.load_5m | number:'1.2-2' }}%
      .row
        .col-2
          small 10m
        .col
          .progress
            .progress-bar([style.width.%]="rd.load_10m", [ngClass]="usage_class(rd.load_10m)")
              | {{ rd.load_10m | number:'1.2-2' }}%
      .row
        .col-3
          small 15m
        .col
          .progress
            .progress-bar([style.width.%]="rd.load_15m", [ngClass]="usage_class(rd.load_15m)")
              | {{ rd.load_15m | number:'1.2-2' }}%


  ng-template(let-hypervisor, pTemplate="rowexpansion")
    graph([config]='graph_config_for_hypervisor[hypervisor.hostname]')
